<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for Windows (x86-64) 2013.1.1 (Build 501)" ts="2014-03-10 15:58:55">
<Class name="App.API.Controller">
<Description>
------------------------------------------------------------------------------
Author: Karl Purkhardt
Last Update: 10/03/2013
------------------------------------------------------------------------------
The App.API.Controller class is responsible for handling/processing API 
requests.  The class encapsulates service objects from the main App.API
class allowing the App.API to remain decoupled from the API services.
------------------------------------------------------------------------------</Description>
<Super>%RegisteredObject</Super>
<TimeChanged>63256,56854.491628</TimeChanged>
<TimeCreated>63046,69735.626447</TimeCreated>

<Property name="serviceFactory">
<Type>%RegisteredObject</Type>
</Property>

<Method name="%OnNew">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ..serviceFactory = ##class(App.API.Helper.ServiceFactory).%New()
	quit $$$OK
]]></Implementation>
</Method>

<Method name="handleRequest">
<FormalSpec>service:%String,action:%String</FormalSpec>
<ReturnType>%AbstractArray</ReturnType>
<Implementation><![CDATA[
	// Create an instance of the service that has been requested
	set service = ..serviceFactory.create(service)

	// Call the requested action of the service instance
	set data = $method(service, action)

	quit data
]]></Implementation>
</Method>

<Method name="checkServiceAccess">
<Description>
Determine if the user has access to the requested service 
and that the service actually exists</Description>
<FormalSpec>service:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	// Ensure that the service exists
	if ('..serviceFactory.hasService(service)) {
		throw ##class(App.API.Exception).%New("Invalid service """_service_""" requested.")
	}
	
	// Ensure that the user has access to this service
	// This ensures that the user has been granted access at the session level.
	// This is granted via the App.API.ServiceSecurity.grantAccess() method.
	if ('##class(App.API.ServiceSecurity).hasAccess(service))	{
		throw ##class(App.API.Exception).%New("You do not have access to the """_service_""" service.")
	}
	
	// Ensure that the user is allowed to access the service
	// This ensures that the user has been allowed access at the application level.
	// This is controlled inside the service class' hasAccess() method.
	set serviceObj = ..serviceFactory.create(service)
	if ('serviceObj.hasAccess()) {
		throw ##class(App.API.Exception).%New("You do not have access to the """_service_""" service.")
	}
]]></Implementation>
</Method>
</Class>
</Export>
